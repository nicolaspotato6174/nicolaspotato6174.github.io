<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Session of Git]]></title>
      <url>%2F2017%2F01%2F09%2FSessionOfGit%2F</url>
      <content type="text"><![CDATA[Git——神奇的时光穿梭机唠叨开始同学，你晓得Git吗？Git是什么鬼？鬼才知道。连git都不知道，你怎么做项目开发？当第一次被问及这一连串问题时，一脸懵逼的我真想找个墙缝钻进去，我的天，我竟然什么都不知道。于是乎，我花了一周的时间去学习传说中Git。 Git很牛叉？Git真的就这么棒？每个程序员都必须会吗？不然，从我个人角度而言，Git在做项目开发以及版本控制方面十分强大，是我们这帮臭屌丝们做项目开发的有力帮手。是否使用Git，自然在于你，喜欢就用，不喜欢就不用咯。毕竟工具是为我们服务的，不能让他成为我们的负担。但是，尽管不使用Git，博主还是建议亲们了解一下Git的工作原理，不论以后是个人还是在团队进行项目开发，都有着很大的用处。再次强调，“不会使用Git” \&lt;> “你不是一个好的攻城狮”，“缺少好的开发习惯” = “你一定不是一个称职的攻城狮” Git是什么Git是目前世界上最先进的分布式版本控制系统（没有之一）。听着好高大上有木有 （￣︶￣）↗ 你是否有这样的经历你正在用Microsoft Word写长篇大论，想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删。好麻烦，杀了我吧 (╥╯^╰╥)那么有没有一个东东，不但可以帮我记录每次的改动，还能让我同时协作编辑呢？当然，就是它——Git，当你学会使用它，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的21世纪。(～￣▽￣)～ Git的诞生博主不是一个会讲故事的人，自行百度 (￣.￣) 安装GitLinux下安装首先，尝试输入git，看看系统是否已经安装Git：$ git ``The program &#39;git&#39; is currently not installed. You can install it by typing: ``sudo apt-get install git像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。 MAC OS X下安装Mac下的安装方法蛮多的，博主只写推荐的一种安装方法：就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”->“Preferences”，在弹出窗口中找到“Download“选择“Command Line Tools”，点“Install”就可以完成安装了。 创建版本库什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。所以，创建一个版本库非常简单。 第一步，选择一个合适的地方，创建一个空目录：$ mkdir learngit ``$ cd learngit ``$ pwd ``/Users/shaonanqu/learngit### 第二步，跳转到你刚创建的目录下，输入以下命令，初始化版本库$ git init ``Initialized empty Git repository in /Users/shaonanqu/learngit/.git/OK 这样你就在learngit目录下创建了一个空的版本库。 实验时间那么现在我们可以尝试创建一个文件，并添加到版本库里。首先，在learngit目录下创建一个txt文件，如shaonan.txt里面你可以随便写你想写的内容。然后使用 git add将其添加到版本库中：$ git add shaonan.txt执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。然后用git commit命令，告诉Git，把文件提交至仓库。$ git commit -m &quot;wrote a readme file&quot; ``master (root-commit) cb926e7] wrote a readme file ``1 file changed, 2 insertions(+) ``create mode 100644 shaonan.txt这样就完成了向空版本库里提交你的文件。 Conclusion1、初始化一个空的版本库，使用git init命令2、添加文件到Git仓库，两步：使用 git add filename，添加文件。使用 git commit，完成。 Git——时光穿梭机博主懒毛病又犯了，下面我只总结下git命令。如果有什么不明白的话，参考Git使用说明，再强调一遍，学习任何新东西，看产品使用说明，比看教程更准确和效率。因此，非常鼓励大家去看说明文档，然后自己动手做做实验。如果还有什么不懂得问题，可以私mmmm我哦 1300142414@qq.com 查看repo状态掌握工作区状态，使用git statu命令。如果git statu告诉你有文件modified，用 git diff可以查看修改内容。 版本回退1、穿梭前，你必须得先知道我穿梭到哪里，唐宋元明清？使用git log命令查看repo里存储的所有版本（历史版本记录），其中每个版本编号的前7位是该版本（唐宋元明清）的id。HEAD是指向当前版本的指针。2、使用 git reset —hard 版本id ，穿梭回那个版本。tip：你可以使用 git reflog 查看自己输入的历史命令。 工作区与暂存区看图撒，左边的就是工作区，右边为暂存区，至于概念嘛 —>Git使用说明非常重要，好好理解其概念。 撤销修改场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout —file场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步：第一步用命令 git reset HEAD file 回到场景1第二步 git checkout —file撤销工作区修改场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，版本退回吧。 删除文件1、工作区中删除你想干掉的文件 rm filename当你 git statu时，Git会提醒你删除了某文件，且当前工作区状态和版本库最新版本不一致。2、如果你确定要删除该文件，那么执行下列操作：$ git rm filename ``$ git commit -m &#39;delete blablablabla&#39;如果你在工作区误删除的话$ git checkout -- deletedfile将版本库中的改文件恢复一份到工作区。有木有很神奇 ︿(￣︶￣)︿ Github——远程仓库注册Github账号Github可是一个神奇的开源社区。有看不完的大牛们的开源代码，是一个非常帮的学习场所。通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。 远程仓库的基本操作1、要关联一个远程库，使用命令 git remote add origin 仓库地址。当然前提是你本地要和远程仓库ssh配对才能使用（也就是说，让你的远程仓库知道你是好人），否则，任何坏人都可以进入你的远程仓库为所欲为。2、关联后使用命令 git push origin master ，就可以推送最新修改。分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！什么是SVN，百度。3、远程仓库克隆使用命令 git clone git@github.com:用户名/项目 So easy吧。╰(￣▽￣)╭ 分支管理分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。 创建与合并分支分支是什么鬼在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上，就像这样：不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：所以Git合并分支也很快！就改改指针，工作区内容也不变！ 常用命令查看分支： git branch创建分支： git branch name切换分支： git checkout name创建+切换分支： git checkout -b name合并某分支到当前分支： git merge name删除分支： git branch -d name貌似就这些咯 (￣▽￣)” 奥，还有一个查看分支合并图： git log —graph更形象的有：git log —graph —pretty=oneline —abbrev-commit 分支管理策略在实际开发中，我们应该按照几个基本原则进行分支管理：首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活。那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。所以，团队合作的分支看起来就像这样：不删除历史的分支合并命令：git merge —no-ff -m “merge with no-ff” dev 团队开发常用命令远程开发命令查看远程信息库，使用 git remote -v；本地新建的分支如果不推送至远程，对其他人就是不可见的。本地推送分支，使用 git push origin branchname,如果推送失败，先用 git pull抓取远程的新提交；在本地创建和远程对应的分支，使用 git checkout -b branchname origin/branchname，两个分支名称最好一致，便于管理；建立本地分支和远程分支的关联，使用 git branch —set-upstream branchname origin/branchname; 给分支添加标签在Git中打标签非常简单，首先，切换到需要打标签的分支上，然后使用命令：git tag 标签名，就可以实现在分支上添加标签，也可以给某次提交添加标签，在上述命令后加上提交id就可以实现；使用 git tag -a tagname -m ‘标签内容’，添加标签内容信息；可以通过 git show tagname 查看标签信息；也可以 git tag查看所有标签；删除标签： git tag -d tagname远程推送标签： git push origin tagname 或者 git push origin —tags推送全部未推送的标签； 其他别名配置在用户主目录下的.gitconfig中配置。 忽略特殊文件在用户主目录下的.gitignore中配置。 Git的基本用法大概就这么多了。想学习这个神奇的穿梭机的孩纸们，赶紧干掉它吧（￣︶￣）↗]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[TaiBai-sed]]></title>
      <url>%2F2017%2F01%2F08%2FTaiBai-sed%2F</url>
      <content type="text"><![CDATA[TravelNote-fstTaiBai Spectacle睡醒了 已经11点了 (￣.￣)上篇是我们第一天的行程，如果你想把整个太白山都玩一遍的话，一定要计划至少两天时间（我是永远不会告诉你们，我们第二天是“跑”完的（￣︶￣）↗） 是时候来张导游图咯天啊，刚百度了一堆景区路线图。突然发现我们上次去就玩一丢丢景点，是时候准备一波新征程咯 (～￣▽￣)～。我们是从梅县西安方向登山滴，如图其中蓝色就是这条线路上可以住宿的地方（依稀记得一个床铺60一晚，当然是非节假期咯），红色的就是我们的登山路线。 重要提示 我们第一天从登山口到天圆地方，这一段属于太白山旅游景区，从住宿的文公庙往后属于太白山自然保护区。有人肯定想问，有什么区别啊？傻啊，动脑子想想，自然保护区更加原生态啊，就是说更需要注意安全，不是我危言耸听，自己看图你走的路是这样滴向下看是这样滴总而言之，安全第一 出发 （￣︶￣）↗相比于第一天来说，第二天的行程以远和险著称（加上第一天晚上下了点小雨），但是第二天登山海拔的跃升仅有500米左右，不要太高兴。哦哟，捕获一只女汉子 (￣▽￣)作为一只臭屌丝加程序攻城狮，一定要保持一颗奉献青春于祖国的繁荣富强的心。天啊，我怎么这样了。回归正题。从文公庙到小文公庙大概10公里，加油啊，亲。途中，如果一朵云飘过来，就会使这个样紫路上兴许你会碰到一些“山民”和 (￣▽￣)”天啊，我还年轻，反正我是不敢骑。到了小文公庙，海拔大概就到3500米左右咯，期间路大部分是那样。从小文公庙出发，前往大爷海，要翻越两座山头。也不晓得是庙里的人，还是登山的亲们喜欢把石头堆成这样的小人状。还有一些爱好者在这里采集一些什么东东，我也不晓得╮(￣▽￣)╭难道是传说中的太白仙草再次捕获两只妹纸和一只帅哥(～￣▽￣)～现在已经是海拔3600左右的位置了，山上风有一丢丢大，被一个呆比骗着说穿个短裤就好，结果我们的着装就是这么奇葩，棉袄+短裤并且一朵云飘过来，就如同身处冰箱中一般。前一秒还是被太阳晒得炙热，后一秒就被冻得不要不要的。路漫漫其修远兮….终于哈哈哈哈，大爷海。真的很难想象，在如此高海拔的山头竟然还有海。不得不说，海水真的非常甜。（￣︶￣）↗这里离目的地拔仙台已经很近啦。稍作休息，继续努力。看，那边那个是二爷海爬个20来分钟，终于到山顶草甸了，风真的蛮大的远处那个，就是它——拔仙台迫不及待的冲过去 （￣︶￣）/哒哒哒哒哒哒，目的地 海拔3771米的拔仙台这一路真是累死了。赶紧休息下。不过拔仙台这里风真的非常非常大，周围全是云，犹如身处险境一般。目的地是拔仙台的小伙伴们，一定要多穿点暖和的方便运动登山的衣服。 Tips水不要带太多，一人1000mL足矣，除非你想带上来卖(￣.￣)当云经过时，视线非常不好，这段时间里尽量休息，不要前行。带点创可贴什么的，以备不时之需。最后在附一张“摄影师”的帅照就是不给正脸，你打我啊 (￣▽￣)”还有什么问题，可以给我发邮箱或者Q我 1300142414@qq.com]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Magic Hexo-fst]]></title>
      <url>%2F2017%2F01%2F08%2FMagic%20Hexo-fst%2F</url>
      <content type="text"><![CDATA[Magic Hexo-fst——简单分享Hexo的配置与部署一丢丢吐槽与建议首先声明一点，本文不仅是教你如何去安装配置以及部署Hexo，更多的是分享一下小白搭建时的一丢丢经验。小白也不建议大家通过网上的各种奇葩教程学习如何搭建自己的Hexo博客，希望大家可以学习阅读Hexo说明文档（感觉更有用）来解决你可能遇到的问题。 言归正传Hexo是什么简而言之，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒 内，即可利用靓丽的主题生成静态网页。 搭建再次强调Hexo说明文档的重要性，如果接下来的步骤不适用你，赶紧去看说明文档吧 -、 - 安装 Hexo安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：Node.jsGit如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。$ npm install -g hexo-cli如果没有安装，自行参见Hexo说明文档。 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 $ hexo init $ cd $ npm install新建完成后，指定文件夹的目录如下： ├── _config.yml ├── package.json ├── scaffolds ├── scripts ├── source | ├── _drafts | └── _posts └── themes至于每一个文件夹是干嘛滴，So easy，看说明文档啊。这里只说说 config.yml ，就是他，我们站点的配置文件，里面有许多好玩的参数，你可以参见说明文档改改，相信你会有更深刻的理解。对咯，其中给大家推荐一款 theme： scheme of next ，非常简约漂亮，反正我是非常喜欢哈，我的博客用的就是这款scheme。 在本地修改完这一连串的配置，（包括：语言设置、财产、菜单设置、侧栏设置、头像设置、作者名称、站点描述、标签云页面、分类页面、统计系统、评论系统等等）现在是需要下面的一个命令即可在本地成功预览你的博客样式。完成之后你就可以开启本地测试浏览你的成果咯，其命令如下 $ hexo c $ hexo g $ hexo s #启动本地服务器测试这个时候在浏览器中输入http://localhost:4000 静态的网站架设完成！ Conclusion非常简单吧，这样你本地博客的搭建就宣告完成啦。下次再分享如何讲本地博客部署到你的服务器上咯。See you again]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[TaiBai-fst]]></title>
      <url>%2F2017%2F01%2F08%2FTaiBai-fst%2F</url>
      <content type="text"><![CDATA[TravelNote-fstTaiBai Spectacle是时候来一篇游记 （=￣ω￣=）o ”会当凌绝顶，一览众山小“ 啊哈，小小嘚瑟一下自己不忍直视的古诗文水平。自古以来，五岳都被人们津津乐道，都是古来圣贤向往之地。虽然五岳只爬过华山（也有四五次了吧），但我还是想说，太白之景一定丝毫不逊色于五岳（原谅我这么武断，太白的美景给我留下的印象太深刻了）。那么，就带给大家一篇太白游记！亦可以当成攻略啦。 前方流量预警，非Wifi用户注意咯。（￣︶￣）↗为了减小大家的流量压力，特意熬夜压缩图片(有图有真相)，不要太谢博主。 切入正题 Let’s goooo话说太白山，太白太白。噢，先得说下太白山的位置不是，大致定位了下（陕西太白、眉县、周至三县交界处）太白山，秦岭山脉最高峰，也是青藏高原以东第一高峰。太白山是渭河水系和汉江水系分水岭最高地段，具低山、中山、高山等地貌类型，界限清楚、特点各异，特别是第四纪冰川活动所雕琢的各种地貌形态保留完整、清晰可辨。太白山与鳌山东西相对，现在我们说的太白山，指的是西太白，而东太白就是与其相对的鳌山。太白太白，太白山到底和李白有关系吗？我也不知道，自己来看呗。 不啰嗦了，出发嗖 ╰(￣▽￣)╭神奇的游客服务中心。你懂得。票价120元/人，我们当时用的学生证，半价！谈钱多伤感情啊，买票等繁杂的手续略过！ 温馨提示：高海拔，高海拔，高海拔。 重要的事说三遍，有高原反应或者其他疾病的亲们还是看看我的图片就好 (～￣▽￣)～上车（其实我并不是一个喜欢被人拍的骚年） 首先会被旅游车从山下拉到海拔2000多米的位置，大概1个小时车程，不得不佩服司机师傅的开车技术，老司机，没得说。当然，沿途也有不少景点可以观看。每个景点都会停，如果乘客想看或者拍照的话。这些景点里最漂亮的94这个 莲花瀑布 绕来绕去，绕啊绕啊，到达登山口这种路，对于科三还没过的马路杀手来说，简直是噩梦 (⊙ˍ⊙) 哈哈哈，准备好吃的喝的，准备登山！（希望大家都准备一个垃圾袋，你懂得，我们是高素质的四有青年）。看到左边这个帅哥腰上的黄色大袄了么，山上冷，怕冷的亲们可以选择租一个，这里就可以租。当然山上也有住的地方，自己选择哈，山上住宿情况还好啦，共有两处，一处在文公庙（天圆地方再往前走1公里左右），另一处在大爷海附近，都是通铺。 登山 Go咦，松鼠，竟然怕我，我有这么可怕吗ヽ(｀⌒´)ﾉ 大概在海拔2500米左右，看 ——小云海（请忽略这个抢镜滴） 爬呀爬，一路上各种美。鉴于流量原因，就随便放两张咯上面这个大云海，真的是美的不要不要的。为什么我更喜欢爬太白山呢，因为其险峻绝不亚于华山。眺望远方，犹如水墨画一般终于到达天圆地方 ︿(￣︶￣)︿这里是海拔3300米左右的位置。我们是下午3点开始爬的，大概5点半左右到这里，如果大家要爬的话，4个小时左右没问题（毕竟我们是年轻小伙嘛）。还有一种选择就是做索道到这里。因为天气原因，要下雨咯，我们决定往前走一公里，先在文公庙住下，养精蓄锐。好吧，今天就到这咯。1点了已经，第二天的种种明天再说。]]></content>
    </entry>

    
  
  
</search>
